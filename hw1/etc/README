Assignment 1: Combinational Circuits
Name: Joon Hyuck Choi
JHED: jchoi100
email: jchoi100@jhu.edu

Problem 1

	*Note: Notation for the operations will be just the operation names 
   themselves in Problem 1. (ex. "NAND" for NAND, "AND" for AND)
	*Corresponding circuit diagrams submitted in pdf format.
   	(file name: csf-assignment1-jchoi100-circuit-diagrams.pdf)

	NAND Gates
 		1) AND: 
      A AND B = (A NAND B) NAND (A NAND B)
 			-> Run the two inputs A and B through two NAND gates, 
			   and use those two outputs as inputs to an overarching NAND gate.

 		2) OR: 
      A OR B = (A NAND A) NAND (B NAND B)
 			-> Run input A with A through a NAND gate, run input B with B through 
         another NAND gate, and use the two outputs we get as inputs to an 
         overarching NAND gate.
 		3) NOT: 
      NOT A = A NAND A
 			-> Just run the input A with itself as the two input to a NAND gate,
			   and the result will come out flipped.

	NOR Gates
 		1) AND: 
      A AND B = (A NOR A) NOR (B NOR B)
 			-> Switch of logic from the NAND Gates cases. 
			     Run input A with A through a NOR gate, 
			     run input B with B through another NOR gate, 
			     and use those two outputs as inputs to an overarching NOR gate.
 		2) OR: 
      A OR B = (A NOR B) NOR (A NOR B) 
 			-> Run A and B through two NOR gates and run the two results 
         we get as inputs to an overarching NOR gate.
 		3) NOT: 
      NOT A = A NOR A
 			-> Again, run A with the same input signal as A through a NOR gate 
         to get a flipped result.


Problem 2

	*Let us express the two gates in DNF.
	*Note: I will use the prime (') notation for negation in Problems 2 and 3, 
	  '*' for AND, and '+' for OR. (For instance, (not A) = A', A AND B = A * B.)
	*Corresponding circuts submitted in pdf format.
  	 (file name: csf-assignment1-jchoi100-circuit-diagrams.pdf)
	
	1) XOR: 
    A XOR B = (A' * B) + (A * B')
		-> Looking at the truth table for XOR, we see that rows 2 and 3 have 
       1's coming out of them, which we'll use to construct our formula in DNF. 
       Anything that is a 0 will be given a NOT, and anything that is a 1 will 
       be used as the input as itself. So row 2 will give us (A' * B), 
		   and row 3 will give us (A * B'). We OR the two results in the end.

	2) XNOR: 
    A XNOR B = (A' * B') + (A * B)
		-> Looking at the truth table for XNOR, we see that rows 1 and 4 
       have 1's coming out of them, and we will use these to construct our 
       formula in DNF. Using the same logic as above, from row 1, 
       we get (A' * B'), and from row 4, we get (A * B). 
       We OR the two results.


Problem 3

	Let us complete the truth table including the info about A ~ G.
	*Corresponding circuts submitted in pdf format.
   (file name: csf-assignment1-jchoi100-circuit-diagrams.pdf)

	  Digit | X Y Z | A B C D E F G 
    ------+-------+--------------
       0  | 0 0 0 | 1 1 1 1 1 1 0
       1  | 0 0 1 | 0 1 1 0 0 0 0
       2  | 0 1 0 | 1 1 0 1 1 0 1
       3  | 0 1 1 | 1 1 1 1 0 0 1
       4  | 1 0 0 | 0 1 1 0 0 1 1
       5  | 1 0 1 | 1 0 1 1 0 1 1
       6  | 1 1 0 | 1 0 1 1 1 1 1
       7  | 1 1 1 | 1 1 1 0 0 0 0

    Notice that in columns for E and F, there are less 1's. 
    So we will use DNF for E and F.
    Notice that in columns A, B, C, D, G, there are less 0's. 
    So we will use CNF for those columns.

    We follow the design process we used in class to come up 
    with the formulas. For DNF, we take the rows with 1 as the output, 
    look at the corresponding inputs, and negate whatever is 0, 
    and not negate whatever is 1. We AND the inputs together, 
    and then OR all of the rows in one formula.

    For CNF, we take the rows with 0 as the output, look at the 
    corresponding inputs, negate whatever is 0, and not negate 
    whatever is 1. And then, we AND the inputs together, 
    negate the "AND-ed" input quantity. This gives us an expression
    with inputs "OR-ed" together. 
    Finally, we AND all of the rows in one formula.

    What we mean by the design process above will be clearer once 
    we see the process in which we derive the formulas below.

    A = (row1)' * (row4)'
      = (X' * Y' * Z)' * (X * Y' * Z')'
      = (X + Y + Z') * (X' + Y + Z)

    B = (row5)' * (row6)'
      = (X * Y' * Z)' * (X * Y * Z')'
      = (X' + Y + Z') * (X' + Y' + Z)

    C = (row2)'
      = (X' * Y * Z')'
      = X + Y' + Z

    D = (row1)' * (row4)' * (row7)'
      = (X' * Y' * Z)' * (X * Y' * Z')' * (X * Y * Z)'
      = (X + Y + Z') * (X' + Y + Z) * (X' + Y' + Z')

    E = row0 + row2 + row6
      = (X' * Y' * Z') + (X' * Y * Z') + (X * Y * Z')

    F = row0 + row4 + row5 + row6
      = (X' * Y' * Z') + (X * Y' * Z') + (X * Y' * Z) + (X * Y * Z')

    G = (row0)' * (row1)' * (row7)'
      = (X' * Y' * Z')' * (X' * Y' * Z)' * (X * Y * Z)'
      = (X + Y + Z) * (X + Y + Z') * (X' + Y' + Z')

<End>